// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package health_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckClient interface {
	// Unary method
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Server streaming method
	WatchServer(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (HealthCheck_WatchServerClient, error)
	// Client streaming method
	WatchClient(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_WatchClientClient, error)
	// bidi streaming method
	WatchBidi(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_WatchBidiClient, error)
}

type healthCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckClient(cc grpc.ClientConnInterface) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/grpc.health.v1.HealthCheck/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *healthCheckClient) WatchServer(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (HealthCheck_WatchServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[0], "/grpc.health.v1.HealthCheck/WatchServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckWatchServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HealthCheck_WatchServerClient interface {
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthCheckWatchServerClient struct {
	grpc.ClientStream
}

func (x *healthCheckWatchServerClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckClient) WatchClient(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_WatchClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[1], "/grpc.health.v1.HealthCheck/WatchClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckWatchClientClient{stream}
	return x, nil
}

type HealthCheck_WatchClientClient interface {
	Send(*HealthCheckRequest) error
	CloseAndRecv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthCheckWatchClientClient struct {
	grpc.ClientStream
}

func (x *healthCheckWatchClientClient) Send(m *HealthCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckWatchClientClient) CloseAndRecv() (*HealthCheckResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *healthCheckClient) WatchBidi(ctx context.Context, opts ...grpc.CallOption) (HealthCheck_WatchBidiClient, error) {
	stream, err := c.cc.NewStream(ctx, &HealthCheck_ServiceDesc.Streams[2], "/grpc.health.v1.HealthCheck/WatchBidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &healthCheckWatchBidiClient{stream}
	return x, nil
}

type HealthCheck_WatchBidiClient interface {
	Send(*HealthCheckRequest) error
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type healthCheckWatchBidiClient struct {
	grpc.ClientStream
}

func (x *healthCheckWatchBidiClient) Send(m *HealthCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *healthCheckWatchBidiClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthCheckServer is the server API for HealthCheck service.
// All implementations must embed UnimplementedHealthCheckServer
// for forward compatibility
type HealthCheckServer interface {
	// Unary method
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Server streaming method
	WatchServer(*HealthCheckRequest, HealthCheck_WatchServerServer) error
	// Client streaming method
	WatchClient(HealthCheck_WatchClientServer) error
	// bidi streaming method
	WatchBidi(HealthCheck_WatchBidiServer) error
	mustEmbedUnimplementedHealthCheckServer()
}

// UnimplementedHealthCheckServer must be embedded to have forward compatible implementations.
type UnimplementedHealthCheckServer struct {
}

func (UnimplementedHealthCheckServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthCheckServer) WatchServer(*HealthCheckRequest, HealthCheck_WatchServerServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchServer not implemented")
}
func (UnimplementedHealthCheckServer) WatchClient(HealthCheck_WatchClientServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchClient not implemented")
}
func (UnimplementedHealthCheckServer) WatchBidi(HealthCheck_WatchBidiServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBidi not implemented")
}
func (UnimplementedHealthCheckServer) mustEmbedUnimplementedHealthCheckServer() {}

// UnsafeHealthCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServer will
// result in compilation errors.
type UnsafeHealthCheckServer interface {
	mustEmbedUnimplementedHealthCheckServer()
}

func RegisterHealthCheckServer(s grpc.ServiceRegistrar, srv HealthCheckServer) {
	s.RegisterService(&HealthCheck_ServiceDesc, srv)
}

func _HealthCheck_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.health.v1.HealthCheck/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HealthCheck_WatchServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HealthCheckServer).WatchServer(m, &healthCheckWatchServerServer{stream})
}

type HealthCheck_WatchServerServer interface {
	Send(*HealthCheckResponse) error
	grpc.ServerStream
}

type healthCheckWatchServerServer struct {
	grpc.ServerStream
}

func (x *healthCheckWatchServerServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HealthCheck_WatchClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckServer).WatchClient(&healthCheckWatchClientServer{stream})
}

type HealthCheck_WatchClientServer interface {
	SendAndClose(*HealthCheckResponse) error
	Recv() (*HealthCheckRequest, error)
	grpc.ServerStream
}

type healthCheckWatchClientServer struct {
	grpc.ServerStream
}

func (x *healthCheckWatchClientServer) SendAndClose(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckWatchClientServer) Recv() (*HealthCheckRequest, error) {
	m := new(HealthCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HealthCheck_WatchBidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HealthCheckServer).WatchBidi(&healthCheckWatchBidiServer{stream})
}

type HealthCheck_WatchBidiServer interface {
	Send(*HealthCheckResponse) error
	Recv() (*HealthCheckRequest, error)
	grpc.ServerStream
}

type healthCheckWatchBidiServer struct {
	grpc.ServerStream
}

func (x *healthCheckWatchBidiServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *healthCheckWatchBidiServer) Recv() (*HealthCheckRequest, error) {
	m := new(HealthCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HealthCheck_ServiceDesc is the grpc.ServiceDesc for HealthCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.health.v1.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthCheck_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchServer",
			Handler:       _HealthCheck_WatchServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchClient",
			Handler:       _HealthCheck_WatchClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchBidi",
			Handler:       _HealthCheck_WatchBidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/health.proto",
}
